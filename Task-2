/* TASK TWO:

Develop a sentiment analysis model to classify movie reviews as positive or
negative. Use a dataset like the IMDb Movie Reviews dataset for training and
testing.*/




import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
data_path = r'C:\Users\ACER\Desktop\archive (7)\IMDB Dataset.csv'
data = pd.read_csv(data_path)

# Display basic information about the dataset
print("Dataset Head:")
print(data.head())
print("\nDataset Info:")
data.info()

# Preprocessing
data['sentiment'] = data['sentiment'].map({'positive': 1, 'negative': 0})  # Encode target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    data['review'], data['sentiment'], test_size=0.2, random_state=42
)

# Convert text data to numerical data using CountVectorizer
vectorizer = CountVectorizer(stop_words='english', max_features=5000)
X_train_vect = vectorizer.fit_transform(X_train)
X_test_vect = vectorizer.transform(X_test)

# Train a Naive Bayes model
model = MultinomialNB()
model.fit(X_train_vect, y_train)

# Make predictions
y_pred = model.predict(X_test_vect)

# Evaluate the model
print("\nModel Performance:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Example prediction
example_review = ["The movie was fantastic with brilliant performances and a gripping story!"]
example_vect = vectorizer.transform(example_review)
example_prediction = model.predict(example_vect)
print("\nExample Prediction:")
print("Positive" if example_prediction[0] == 1 else "Negative")
